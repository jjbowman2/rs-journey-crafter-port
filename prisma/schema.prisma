// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model GameAccount {
    id          String       @id @default(uuid())
    userId      String
    accountName String
    game        Game
    accountType AccountType?
    tasks       Task[]
}

model Task {
    id                 String       @id @default(uuid())
    account            GameAccount  @relation(fields: [accountId], references: [id])
    accountId          String
    taskType           TaskType
    title              String
    description        String?
    skill              Skill?
    level              Int?
    questId            Int?
    achievementDiaryId Int?
    combatTaskId       Int?
    dependees          Dependency[] @relation("dependent")
    dependents         Dependency[] @relation("dependee")
    complete           Boolean
    flagged            Boolean      @default(false)
    labels             String[]
    createdAt          DateTime     @default(now())
}

model Dependency {
    dependee    Task   @relation("dependee", fields: [dependeeId], references: [id], onDelete: Cascade)
    dependeeId  String
    dependent   Task   @relation("dependent", fields: [dependentId], references: [id], onDelete: Cascade)
    dependentId String

    @@id([dependeeId, dependentId])
}

model Template {
    id          String         @id @default(uuid())
    name        String
    description String?
    tags        String[]
    tasks       TemplateTask[]
}

model TemplateTask {
    id                 String               @id @default(uuid())
    template           Template             @relation(fields: [templateId], references: [id])
    templateId         String
    taskType           TaskType
    title              String
    description        String?
    skill              Skill?
    level              Int?
    questId            Int?
    achievementDiaryId Int?
    combatTaskId       Int?
    dependees          TemplateDependency[] @relation("templateDependee")
    dependents         TemplateDependency[] @relation("templateDependent")
    labels             String[]
}

model TemplateDependency {
    dependee    TemplateTask @relation("templateDependee", fields: [dependeeId], references: [id])
    dependeeId  String
    dependent   TemplateTask @relation("templateDependent", fields: [dependentId], references: [id])
    dependentId String

    @@id([dependeeId, dependentId])
}

enum Game {
    osrs
    rs
    osrs_leagues
}

enum AccountType {
    main
    ironman
    hardcore_ironman
    group_ironman
    ultimate_ironman
}

enum TaskType {
    skill
    quest
    achievementDiary
    combatTask
    item
    custom
}

enum Skill {
    attack
    strength
    defence
    ranged
    prayer
    magic
    runecraft
    runecrafting
    hitpoints
    crafting
    mining
    smithing
    fishing
    cooking
    firemaking
    woodcutting
    agility
    herblore
    thieving
    fletching
    slayer
    farming
    construction
    hunter
    constitution
    dunegoneering
    summoning
    divination
    invention
}
